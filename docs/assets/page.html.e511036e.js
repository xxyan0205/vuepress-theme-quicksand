import{r as e,o as t,c as a,a as n,w as r,F as o,d as s,b as d}from"./app.bd6623af.js";const l={},i=s('<h1 id="page" tabindex="-1"><a class="header-anchor" href="#page" aria-hidden="true">#</a> Page</h1><p>VuePress is markdown-centered. Each markdown file inside your project is a standalone page.</p><h2 id="routing" tabindex="-1"><a class="header-anchor" href="#routing" aria-hidden="true">#</a> Routing</h2><p>By default, the route path of a page is determined by the relative path of your markdown file.</p><p>Assuming this is the directory structure of your markdown files:</p><div class="theme-code-dark"><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>└─ docs\n   ├─ guide\n   │  ├─ getting-started.md\n   │  └─ README.md\n   ├─ contributing.md\n   └─ README.md\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></div>',6),c=d("Take the "),u=n("code",null,"docs",-1),p=d(" directory as your "),m=d("sourceDir"),h=d(", e.g. your are running "),f=n("code",null,"vuepress dev docs",-1),g=d(" command. Then the route paths of your markdown files would be:"),b=s('<table><thead><tr><th>Relative Path</th><th>Route Path</th></tr></thead><tbody><tr><td><code>/README.md</code></td><td><code>/</code></td></tr><tr><td><code>/contributing.md</code></td><td><code>/contributing.html</code></td></tr><tr><td><code>/guide/README.md</code></td><td><code>/guide/</code></td></tr><tr><td><code>/guide/page.md</code></td><td><code>/guide/page.html</code></td></tr></tbody></table><h2 id="frontmatter" tabindex="-1"><a class="header-anchor" href="#frontmatter" aria-hidden="true">#</a> Frontmatter</h2>',2),k=d("A markdown file could contain a "),w={href:"https://yaml.org/",target:"_blank",rel:"noopener noreferrer"},y=d("YAML"),v=d(" frontmatter. The frontmatter must be at the top of the Markdown file and must be wrapped with a couple of triple-dashed lines. Here is a basic example:"),x=s('<div class="theme-code-dark"><div class="language-markdown ext-md line-numbers-mode"><pre class="language-markdown"><code><span class="token front-matter-block"><span class="token punctuation">---</span>\n<span class="token font-matter yaml language-yaml"><span class="token key atrule">lang</span><span class="token punctuation">:</span> en<span class="token punctuation">-</span>US\n<span class="token key atrule">title</span><span class="token punctuation">:</span> Title of this page\n<span class="token key atrule">description</span><span class="token punctuation">:</span> Description of this page</span>\n<span class="token punctuation">---</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></div>',1),M=d("You must have noticed that those fields are similar with the "),R=d("Site Config"),E=d(" in the "),P=d("Config File"),T=d(". You can override "),A=n("code",null,"lang",-1),_=d(", "),D=n("code",null,"title",-1),V=d(", "),C=n("code",null,"description",-1),F=d(", etc., of current page via frontmatter. So you can take frontmatter as page scope config."),L=n("p",null,"Also, VuePress has built-in support for some frontmatter fields, and your theme may have its own special frontmatter, too.",-1),S={class:"custom-container tip"},H=n("p",{class:"custom-container-title"},"TIP",-1),Y=d("Check out the "),j=d("Frontmatter Reference"),B=d(" for a full list of VuePress built-in frontmatter."),I=d("Check out the "),N=d("Default Theme > Frontmatter Reference"),O=d(" for the frontmatter of default theme."),U=n("h2",{id:"content",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#content","aria-hidden":"true"},"#"),d(" Content")],-1),W=n("p",null,[d("The main content of your page is written in Markdown. VuePress will firstly transform your Markdown to HTML code, then treat the HTML code as "),n("code",null,"<template>"),d(" of Vue SFC.")],-1),q=d("With the power of "),z={href:"https://github.com/markdown-it/markdown-it",target:"_blank",rel:"noopener noreferrer"},G=d("markdown-it"),J=d(" and Vue template syntax, the basic Markdown can be extended a lot. Next, check out the "),K=d("Markdown"),Q=d(" guide for all the extensions of Markdown in VuePress.");l.render=function(s,d){const l=e("RouterLink"),X=e("OutboundLink");return t(),a(o,null,[i,n("p",null,[c,u,p,n(l,{to:"/reference/cli.html"},{default:r((()=>[m])),_:1}),h,f,g]),b,n("p",null,[k,n("a",w,[y,n(X)]),v]),x,n("p",null,[M,n(l,{to:"/guide/configuration.html#site-config"},{default:r((()=>[R])),_:1}),E,n(l,{to:"/guide/configuration.html#config-file"},{default:r((()=>[P])),_:1}),T,A,_,D,V,C,F]),L,n("div",S,[H,n("p",null,[Y,n(l,{to:"/reference/frontmatter.html"},{default:r((()=>[j])),_:1}),B]),n("p",null,[I,n(l,{to:"/reference/default-theme/frontmatter.html"},{default:r((()=>[N])),_:1}),O])]),U,W,n("p",null,[q,n("a",z,[G,n(X)]),J,n(l,{to:"/guide/markdown.html"},{default:r((()=>[K])),_:1}),Q])],64)};export default l;
